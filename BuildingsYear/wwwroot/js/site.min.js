/** @license
 *
 *  Copyright (C) 2012 K. Arthur Endsley (kaendsle@mtu.edu)
 *  Michigan Tech Research Institute (MTRI)
 *  3600 Green Court, Suite 100, Ann Arbor, MI, 48105
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
(function(n,t){typeof define=="function"&&define.amd?define(function(){return t()}):typeof module!="undefined"&&typeof exports=="object"?module.exports=t():n.Wkt=t()})(this,function(){var t,i,r,n;return r=this,n=function(t){if(t instanceof n)return t;if(!(this instanceof n))return new n(t);this._wrapped=t},t=function(n,t){return n.substring(0,t.length)===t},i=function(n,t){return n.substring(n.length-t.length)===t},n.delimiter=" ",n.isArray=function(n){return!!(n&&n.constructor===Array)},n.trim=function(n,r){for(r=r||" ";t(n,r);)n=n.substring(1);while(i(n,r))n=n.substring(0,n.length-1);return n},n.Wkt=function(t){this.delimiter=n.delimiter||" ";this.wrapVertices=!0;this.regExes={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,spaces:/\s+|\+/,numeric:/-*\d+(\.*\d+)?/,comma:/\s*,\s*/,parenComma:/\)\s*,\s*\(/,coord:/-*\d+\.*\d+ -*\d+\.*\d+/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,ogcTypes:/^(multi)?(point|line|polygon|box)?(string)?$/i,crudeJson:/^{.*"(type|coordinates|geometries|features)":.*}$/};this._stripWhitespaceAndParens=function(n){var t=n.trim();return t.replace(/^\(?(.*?)\)?$/,"$1")};this.components=undefined;t&&typeof t=="string"?this.read(t):t&&typeof t!==undefined&&this.fromObject(t)},n.Wkt.prototype.isCollection=function(){switch(this.type.slice(0,5)){case"multi":return!0;case"polyg":return!0;default:return!1}},n.Wkt.prototype.sameCoords=function(n,t){return n.x===t.x&&n.y===t.y},n.Wkt.prototype.fromObject=function(n){var t;return t=n.hasOwnProperty("type")&&n.hasOwnProperty("coordinates")?this.fromJson(n):this.deconstruct.call(this,n),this.components=t.components,this.isRectangle=t.isRectangle||!1,this.type=t.type,this},n.Wkt.prototype.toObject=function(t){var i=this.construct[this.type].call(this,t);return typeof i!="object"||n.isArray(i)||(i.properties=this.properties),i},n.Wkt.prototype.toString=function(){return this.write()},n.Wkt.prototype.fromJson=function(t){var r,u,f,i,o,e;if(this.type=t.type.toLowerCase(),this.components=[],t.hasOwnProperty("geometry"))return this.fromJson(t.geometry),this.properties=t.properties,this;if(i=t.coordinates,n.isArray(i[0])){for(r in i)if(i.hasOwnProperty(r))if(n.isArray(i[r][0])){e=[];for(u in i[r])if(i[r].hasOwnProperty(u))if(n.isArray(i[r][u][0])){o=[];for(f in i[r][u])i[r][u].hasOwnProperty(f)&&o.push({x:i[r][u][f][0],y:i[r][u][f][1]});e.push(o)}else e.push({x:i[r][u][0],y:i[r][u][1]});this.components.push(e)}else this.type==="multipoint"?this.components.push([{x:i[r][0],y:i[r][1]}]):this.components.push({x:i[r][0],y:i[r][1]})}else this.components.push({x:i[0],y:i[1]});return this},n.Wkt.prototype.toJson=function(){var t,r,i,u,e,o,f;if(t=this.components,r={coordinates:[],type:function(){var t,n,i;n=this.regExes.ogcTypes.exec(this.type).slice(1);i=[];for(t in n)n.hasOwnProperty(t)&&n[t]!==undefined&&i.push(n[t].toLowerCase().slice(0,1).toUpperCase()+n[t].toLowerCase().slice(1));return i}.call(this).join("")},this.type.toLowerCase()==="box"){r.type="Polygon";r.bbox=[];for(i in t)t.hasOwnProperty(i)&&(r.bbox=r.bbox.concat([t[i].x,t[i].y]));return r.coordinates=[[[t[0].x,t[0].y],[t[0].x,t[1].y],[t[1].x,t[1].y],[t[1].x,t[0].y],[t[0].x,t[0].y]]],r}for(i in t)if(t.hasOwnProperty(i))if(n.isArray(t[i])){f=[];for(u in t[i])if(t[i].hasOwnProperty(u))if(n.isArray(t[i][u])){o=[];for(e in t[i][u])t[i][u].hasOwnProperty(e)&&o.push([t[i][u][e].x,t[i][u][e].y]);f.push(o)}else t[i].length>1?f.push([t[i][u].x,t[i][u].y]):f=f.concat([t[i][u].x,t[i][u].y]);r.coordinates.push(f)}else t.length>1?r.coordinates.push([t[i].x,t[i].y]):r.coordinates=r.coordinates.concat([t[i].x,t[i].y]);return r},n.Wkt.prototype.merge=function(n){var t=this.type.slice(0,5);if(this.type!==n.type&&this.type.slice(5,this.type.length)!==n.type)throw TypeError("The input geometry types must agree or the calling this.Wkt.Wkt instance must be a multigeometry of the other");switch(t){case"point":this.components=[this.components.concat(n.components)];break;case"multi":this.components=this.components.concat(n.type.slice(0,5)==="multi"?n.components:[n.components]);break;default:this.components=[this.components,n.components]}return t!=="multi"&&(this.type="multi"+this.type),this},n.Wkt.prototype.read=function(n){var t;if(t=this.regExes.typeStr.exec(n),t)this.type=t[1].toLowerCase(),this.base=t[2],this.ingest[this.type]&&(this.components=this.ingest[this.type].apply(this,[this.base]));else if(this.regExes.crudeJson.test(n))if(typeof JSON=="object"&&typeof JSON.parse=="function")this.fromJson(JSON.parse(n));else{console.log("JSON.parse() is not available; cannot parse GeoJSON strings");throw{name:"JSONError",message:"JSON.parse() is not available; cannot parse GeoJSON strings"};}else{console.log("Invalid WKT string provided to read()");throw{name:"WKTError",message:"Invalid WKT string provided to read()"};}return this},n.Wkt.prototype.write=function(n){var i,t,r;for(n=n||this.components,t=[],t.push(this.type.toUpperCase()+"("),i=0;i<n.length;i+=1){if(this.isCollection()&&i>0&&t.push(","),!this.extract[this.type])return null;r=this.extract[this.type].apply(this,[n[i]]);this.isCollection()&&this.type!=="multipoint"?t.push("("+r+")"):(t.push(r),i!==n.length-1&&this.type!=="multipoint"&&t.push(","))}return t.push(")"),t.join("")},n.Wkt.prototype.extract={point:function(n){return String(n.x)+this.delimiter+String(n.y)},multipoint:function(n){for(var r=[],i,t=0;t<n.length;t+=1)i=this.extract.point.apply(this,[n[t]]),this.wrapVertices&&(i="("+i+")"),r.push(i);return r.join(",")},linestring:function(n){return this.extract.point.apply(this,[n])},multilinestring:function(n){var t,i=[];if(n.length)for(t=0;t<n.length;t+=1)i.push(this.extract.linestring.apply(this,[n[t]]));else i.push(this.extract.point.apply(this,[n]));return i.join(",")},polygon:function(n){return this.extract.multilinestring.apply(this,[n])},multipolygon:function(n){for(var i=[],t=0;t<n.length;t+=1)i.push("("+this.extract.polygon.apply(this,[n[t]])+")");return i.join(",")},box:function(n){return this.extract.linestring.apply(this,[n])},geometrycollection:function(){console.log("The geometrycollection WKT type is not yet supported.")}},n.Wkt.prototype.ingest={point:function(t){var i=n.trim(t).split(this.regExes.spaces);return[{x:parseFloat(this.regExes.numeric.exec(i[0])[0]),y:parseFloat(this.regExes.numeric.exec(i[1])[0])}]},multipoint:function(t){var i,r,u;for(r=[],u=n.trim(t).split(this.regExes.comma),i=0;i<u.length;i+=1)r.push(this.ingest.point.apply(this,[u[i]]));return r},linestring:function(n){var t,r,i;for(r=this.ingest.multipoint.apply(this,[n]),i=[],t=0;t<r.length;t+=1)i=i.concat(r[t]);return i},multilinestring:function(t){var r,u,f,i;for(u=[],i=n.trim(t).split(this.regExes.doubleParenComma),i.length===1&&(i=n.trim(t).split(this.regExes.parenComma)),r=0;r<i.length;r+=1)f=this._stripWhitespaceAndParens(i[r]),u.push(this.ingest.linestring.apply(this,[f]));return u},polygon:function(t){var r,u,f,e,o,s,i,h,c;for(s=n.trim(t).split(this.regExes.parenComma),f=[],r=0;r<s.length;r+=1){for(o=this._stripWhitespaceAndParens(s[r]).split(this.regExes.comma),e=[],u=0;u<o.length;u+=1)i=o[u].split(this.regExes.spaces),i.length>2&&(i=i.filter(function(n){return n!=""})),i.length===2&&(h=i[0],c=i[1],e.push({x:parseFloat(h),y:parseFloat(c)}));f.push(e)}return f},box:function(n){var t,r,i;for(r=this.ingest.multipoint.apply(this,[n]),i=[],t=0;t<r.length;t+=1)i=i.concat(r[t]);return i},multipolygon:function(t){var i,r,f,u;for(r=[],u=n.trim(t).split(this.regExes.doubleParenComma),i=0;i<u.length;i+=1)f=this._stripWhitespaceAndParens(u[i]),r.push(this.ingest.polygon.apply(this,[f]));return r},geometrycollection:function(){console.log("The geometrycollection WKT type is not yet supported.")}},n});